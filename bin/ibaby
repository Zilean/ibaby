#! /usr/bin/env node

const path = require('path');
const program = require('commander');
const Util = require('../lib/util');
const fs = require('fs-extra');
const signale = require('signale');
const axios = require('axios');

const getVersionPath = '/api/version';
const setting = Util.getSetting();

// Get version
program
  .version(Util.getPkgInfo().version);

// Command: ibaby init [url]
program
  .command('init [url]')
  .description('init Ibaby')
  .action(function (url) {
    remindNewVersion();
  })

program.parse(process.argv);

// Reminders to update new versions
function remindNewVersion (cb) {
  const remindFile = path.join(Util.getIbabyPath(), '.remind.json');
  let remindInfo = {};
  if (fs.existsSync(remindFile)) {
    try {
      remindInfo = JSON.parse(String(fs.readFileSync(remindFile)));
    } catch (e) {
      remindInfo = {};
      signale.error('Error reading remind.json');
    }
  }
  if (!remindInfo.update) {
    remindInfo.update = {};
  }
  const updateInfo = remindInfo.update;
  if (!updateInfo.date || !Util.isToday(updateInfo.date)) {
    checkIbabyVersion();
  } else {
    cb();
  }
}

function checkIbabyVersion (successCb, errorCb) {
  axios.get(setting.report_url + getVersionPath)
    .then(function (response) {
        // handle success
        // console.log(response);
    })
    .catch(function (error) {
        // handle error
        // console.log(error);
    })
}
